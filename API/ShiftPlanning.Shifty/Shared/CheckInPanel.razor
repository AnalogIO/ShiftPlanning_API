@using ShiftPlanning.DTOs.Shift
@using ShiftPlanning.Shifty.Repositories
@using ShiftPlanning.DTOs.Employee

@inject IShiftRepository _shiftRepository

<MudExpansionPanel Text="@(ExpansionPanelTitle())" IsInitiallyExpanded="@IsExpanded">
    <MudGrid Spacing="2" Justify="Justify.Center" VerticalAlign="GridLayoutVerticalAlign.Center">
        @if (ShiftHasEnded)
        {
            <MudItem xs="12">
                <MudAlert Severity="Severity.Warning" Variant="Variant.Outlined">You cannot edit a shift which has ended</MudAlert>
            </MudItem>
        }

        @foreach (var employee in Shift.Employees)
        {
            <MudItem xs="7">
                <MudText>@employee.FirstName @employee.LastName</MudText>
                <MudDivider></MudDivider>
            </MudItem>
            <MudItem xs="5">
                <MudButton Color="Color.Primary"
                           Variant="Variant.Filled"
                           Disabled="@(ShiftHasEnded || IsEmployeeCheckedIn(employee))"
                           OnClick="@(async () => await CheckIn(employee.Id))">
                    <MudText Class="ms-2">Check in</MudText>
                </MudButton>
                <MudButton Color="Color.Error"
                           Variant="Variant.Filled"
                           Disabled="@(ShiftHasEnded || !IsEmployeeCheckedIn(employee))"
                           OnClick="@(async () => await CheckOut(employee.Id))">
                    <MudText Class="ms-2">Check out</MudText>
                </MudButton>

                @if (_employeesCheckedIn[employee.Id] == CheckInStatus.Updating)
                {
                    <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true"/>
                }
            </MudItem>
        }
    </MudGrid>
</MudExpansionPanel>

@code {

    [Parameter]
    public ShiftDTO Shift { get; set; }

    private Dictionary<int, CheckInStatus> _employeesCheckedIn;

    private enum CheckInStatus
    {
        NotCheckedIn,
        Updating,
        CheckedIn
    }

    protected override void OnInitialized()
    {
        _employeesCheckedIn = new Dictionary<int, CheckInStatus>();

        foreach (var employee in Shift.Employees)
        {
            _employeesCheckedIn.Add(employee.Id, Shift.CheckIns.Any(c => c.Employee.Id == employee.Id) ? CheckInStatus.CheckedIn : CheckInStatus.NotCheckedIn);
        }
    }

    async Task CheckIn(int employeeId)
    {
        if (_employeesCheckedIn[employeeId] == CheckInStatus.NotCheckedIn)
        {
            _employeesCheckedIn[employeeId] = CheckInStatus.Updating;
            var successfulCheckIn = await _shiftRepository.CheckIn(Shift.Id, employeeId);

            if (successfulCheckIn) _employeesCheckedIn[employeeId] = CheckInStatus.CheckedIn;
            else _employeesCheckedIn[employeeId] = CheckInStatus.NotCheckedIn;
        }
    }

    async Task CheckOut(int employeeId)
    {
        if (_employeesCheckedIn[employeeId] == CheckInStatus.CheckedIn)
        {
            _employeesCheckedIn[employeeId] = CheckInStatus.Updating;

            var successfulCheckOut = await _shiftRepository.CheckOut(Shift.Id, employeeId);

            if (successfulCheckOut) _employeesCheckedIn[employeeId] = CheckInStatus.NotCheckedIn;
            else _employeesCheckedIn[employeeId] = CheckInStatus.CheckedIn;
        }
    }

    private string ExpansionPanelTitle()
    {
        var title = Shift.Start.ToString("HH:mm") + " - " + Shift.End.ToString("HH:mm");

        if (ShiftHasEnded) title += " (Ended)";

        return title;
    }

    private bool IsExpanded => Shift.Start < DateTime.Now && DateTime.Now < Shift.End; 
    private bool ShiftHasEnded => Shift.End < DateTime.Now;

    private bool IsEmployeeCheckedIn(EmployeeDTO employee) => _employeesCheckedIn[employee.Id] == CheckInStatus.CheckedIn;

}